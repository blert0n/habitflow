// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countNotes = `-- name: CountNotes :one
SELECT COUNT(*)
FROM notes
WHERE user_id = $1
  AND ($3::bool IS FALSE OR habit_id = $2)
`

type CountNotesParams struct {
	UserID  pgtype.Int4 `json:"user_id"`
	HabitID int32       `json:"habit_id"`
	Column3 bool        `json:"column_3"`
}

func (q *Queries) CountNotes(ctx context.Context, arg CountNotesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countNotes, arg.UserID, arg.HabitID, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listNotes = `-- name: ListNotes :many
SELECT id, habit_id, content, created_at, updated_at, user_id
FROM notes
WHERE user_id = $1
  AND ($3::bool IS FALSE OR habit_id = $2)
ORDER BY created_at DESC
LIMIT $4
OFFSET $5
`

type ListNotesParams struct {
	UserID  pgtype.Int4 `json:"user_id"`
	HabitID int32       `json:"habit_id"`
	Column3 bool        `json:"column_3"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) ListNotes(ctx context.Context, arg ListNotesParams) ([]Notes, error) {
	rows, err := q.db.Query(ctx, listNotes,
		arg.UserID,
		arg.HabitID,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notes{}
	for rows.Next() {
		var i Notes
		if err := rows.Scan(
			&i.ID,
			&i.HabitID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
