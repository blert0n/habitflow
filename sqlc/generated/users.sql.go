// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (first_name,last_name, username, email, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, first_name, last_name, email, password, createdat, updatedat
`

type CreateUserParams struct {
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Username  string      `json:"username"`
	Email     string      `json:"email"`
	Password  string      `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, first_name, last_name, email, password, createdat, updatedat FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, first_name, last_name, email, password, createdat, updatedat FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const seedUser = `-- name: SeedUser :one
INSERT INTO users (username, email, password)
VALUES ($1, $2, $3)
ON CONFLICT (username) DO UPDATE
SET username = EXCLUDED.username
RETURNING id, username, first_name, last_name, email, password, createdat, updatedat
`

type SeedUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) SeedUser(ctx context.Context, arg SeedUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, seedUser, arg.Username, arg.Email, arg.Password)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2,
    email = $3,
    password = $4,
    updatedAt = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, username, first_name, last_name, email, password, createdat, updatedat
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
